from Crypto.Util.number import long_to_bytes
import math

def fermat(n):
    print("init")

    a = math.isqrt(n)
    b = a
    b2 = pow(a,2) - n

    print("a= "+str(a))
    print("b= " + str(b))

    print("b2=" + str(b2))
    print("delta-->" + str(pow(b, 2) - b2 % n)+"\n-----------")
    print("iterate")
    i = 0

    while True:
        if b2 == pow(b,2):
            print("found at iteration "+str(i))
            break;
        else:
            a +=1
            b2 = pow(a, 2) - n
            b = math.isqrt(b2)
        i+=1
        print("iteration="+str(i))
        print("a= " + str(a))
        print("b= " + str(b))
    print("b2 =" + str(b2))
    print("delta-->" + str(pow(b, 2) - b2 % n) + "\n-----------")

    p = a+b
    q = a-b

    return p,q

n= 153435057911934886589644108899730612717443014235930025474804160011055408922128555298715810934589690270045097542185838244607500879317153353388263124991080117241754057305900339752509694566496033191025285505374182567808221702395096500602739000801583207087740749593783739095151076848464448450525797154449151532451
e= 65537
ct= 304351179442705754075741974929735617394091513136990296213594284535437448042415503615547488290276773468001876964368645300807388893216284582672585465956742235988642778776581426495868076667503830646261304693223705592942461143800705107484799787939298090273617246650341119103077022800697206704865636936363839068


p, q =fermat(n)
phi = (p - 1) * (q - 1)

d = pow(e, -1, phi)

m = pow(ct, d, n)
print(long_to_bytes(m))